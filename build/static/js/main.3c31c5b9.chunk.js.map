{"version":3,"sources":["components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Filter/Filter.module.css","components/Loader/styles.module.css","redux/actions.js","services/contactsAPI.js","redux/operations.js","redux/selectors.js","components/Loader/Loader.jsx","components/Contacts/Contacts.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","fetchContactsAPI","a","axios","get","data","addContactAPI","contact","post","deleteContactAPI","id","delete","defaults","baseURL","getFilter","state","contacts","filter","getLoadingStatus","loading","getVisibleContacts","createSelector","items","name","toLowerCase","includes","Spinner","className","styles","overlay","type","color","height","width","Contacts","contactsItem","useSelector","dispatch","useDispatch","useEffect","s","contactsList","map","item","contactsText","number","contactsBtn","onClick","Form","useState","setName","setNumber","handleInput","event","currentTarget","value","reset","onSubmit","preventDefault","gettingData","addingContact","form","formLabel","formInput","onChange","pattern","title","required","formBtn","Filter","filterWrapper","filterLabel","filterInput","e","target","App","createReducer","_","payload","error","action","window","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c31c5b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2kmxj\",\"formLabel\":\"Form_formLabel__1RRbD\",\"formInput\":\"Form_formInput__rzoFH\",\"formBtn\":\"Form_formBtn___Z7Jv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsItem\":\"Contacts_contactsItem__wK07O\",\"contactsText\":\"Contacts_contactsText__D9Hng\",\"contactsBtn\":\"Contacts_contactsBtn__1YXY5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"Filter_filterWrapper__2HIAY\",\"filterLabel\":\"Filter_filterLabel__3NqFs\",\"filterInput\":\"Filter_filterInput__3RKvn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"styles_overlay__29TLk\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchError');\r\n\r\nexport const addContactRequest = createAction('contacts/addRequest');\r\nexport const addContactSuccess = createAction('contacts/addSuccess');\r\nexport const addContactError = createAction('contacts/addError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteError');\r\n\r\nexport const filterContacts = createAction('contacts/filterContacts');\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport async function fetchContactsAPI() {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n}\r\nexport async function addContactAPI(contact) {\r\n  const { data } = await axios.post('/contacts', contact);\r\n  return data;\r\n}\r\n\r\nexport async function deleteContactAPI(id) {\r\n  await axios.delete(`/contacts/${id}`);\r\n}\r\n","import {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './actions';\r\nimport {\r\n  addContactAPI,\r\n  fetchContactsAPI,\r\n  deleteContactAPI,\r\n} from 'services/contactsAPI';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const contacts = await fetchContactsAPI();\r\n    dispatch(fetchContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\nexport const addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  const gettingData = await fetchContactsAPI();\r\n  if (gettingData) {\r\n    const nameArray = gettingData.map(item => {\r\n      return item.name;\r\n    });\r\n    if (!nameArray.includes(contact.name)) {\r\n      try {\r\n        const addingContact = await addContactAPI(contact);\r\n        dispatch(addContactSuccess(addingContact));\r\n      } catch (error) {\r\n        dispatch(addContactError(error));\r\n      }\r\n    } else {\r\n      dispatch(addContactError(`${contact.name} is already in contacts.`));\r\n    }\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await deleteContactAPI(id);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","import { createSelector } from 'reselect';\r\nexport const getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoadingStatus = state => state.contacts.loading;\r\nexport const getVisibleContacts = createSelector(\r\n  [getItems, getFilter],\r\n  (items, filter) => {\r\n    return items.filter(({ name }) => name.toLowerCase().includes(filter));\r\n  },\r\n);\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport styles from './styles.module.css';\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div className={styles.overlay}>\r\n      <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { deleteContact, fetchContacts } from 'redux/operations';\r\nimport { getVisibleContacts, getLoadingStatus } from 'redux/selectors';\r\nimport Spinner from 'components/Loader/Loader';\r\nimport s from './Contacts.module.css';\r\n\r\nexport default function Contacts() {\r\n  const contactsItem = useSelector(getVisibleContacts);\r\n  const loading = useSelector(getLoadingStatus);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n\r\n  if (contactsItem) {\r\n    if (loading) {\r\n      return <Spinner />;\r\n    }\r\n    return (\r\n      <ul className={s.contactsList}>\r\n        {contactsItem.map(item => (\r\n          <li key={item.id} className={s.contactsItem}>\r\n            <p className={s.contactsText}>\r\n              {item.name}: {item.number}\r\n            </p>\r\n            <button\r\n              className={s.contactsBtn}\r\n              type=\"button\"\r\n              onClick={() => dispatch(deleteContact(item.id))}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n  return;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addContact } from 'redux/operations';\r\nimport { getLoadingStatus } from 'redux/selectors';\r\nimport Spinner from 'components/Loader/Loader';\r\nimport s from './Form.module.css';\r\n\r\nexport default function Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(getLoadingStatus);\r\n\r\n  const handleInput = event => {\r\n    const { name, value } = event.currentTarget;\r\n    if (name === 'name') {\r\n      setName(value);\r\n    } else if (name === 'number') {\r\n      setNumber(value);\r\n    }\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch(\r\n      addContact({\r\n        name,\r\n        number,\r\n      }),\r\n    );\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  if (loading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <label className={s.formLabel}>\r\n        Name\r\n        <input\r\n          className={s.formInput}\r\n          value={name}\r\n          onChange={handleInput}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={s.formLabel}>\r\n        Number\r\n        <input\r\n          className={s.formInput}\r\n          value={number}\r\n          onChange={handleInput}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={s.formBtn}>\r\n        Add to contacts\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterContacts } from 'redux/actions';\r\nimport { getFilter } from 'redux/selectors';\r\nimport { getLoadingStatus } from 'redux/selectors';\r\nimport Spinner from 'components/Loader/Loader';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(getLoadingStatus);\r\n\r\n  if (loading) {\r\n    return <Spinner />;\r\n  }\r\n  return (\r\n    <div className={s.filterWrapper}>\r\n      <label className={s.filterLabel}>\r\n        Find contacts by name\r\n        <input\r\n          className={s.filterInput}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={value}\r\n          onChange={e => dispatch(filterContacts(e.target.value))}\r\n        ></input>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Contacts from './components/Contacts';\r\nimport Form from './components/Form';\r\nimport Filter from './components/Filter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Form />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <Contacts />\r\n    </div>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContacts,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => {\r\n    return payload;\r\n  },\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    return [...state, payload];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) => {\r\n    return state.filter(({ id }) => id !== payload);\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => {\r\n    return payload.toLowerCase();\r\n  },\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [addContactError]: (_, action) => window.alert(action.payload),\r\n  [addContactRequest]: () => null,\r\n  [deleteContactError]: (_, action) => action.payload,\r\n  [deleteContactRequest]: () => null,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  error,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './reducers';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n//export const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n//import { PersistGate } from 'redux-persist/integration/react';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}